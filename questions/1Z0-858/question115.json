{
    "question": "Given a JSP page:<br>11. <n:recurse><br>12. <n:recurse>\n13. <n:recurse>\n14. <n:recurse />\n15. </n:recurse>\n16. </n:recurse>\n17. </n:recurse>\nThe tag handler for n:recurse extends SimpleTagSupport.",
    "options": {
        "A": "Assuming an n:recurse tag can either contain an empty body or another n:recurse tag, whichstrategy allows the tag handler for n:recurse to output the nesting depth of the deepest n:recursetag?",
        "B": "It is impossible to determine the deepest nesting depth because it is impossible for tag handlers that extend SimpleTagSupport to communicate with their parent and child tags.",
        "C": "Create a private non-static attribute in the tag handler class called count of type int initialized to 0. Increment count in the doTag method. If the tag has a body, invoke the fragment for that body. Otherwise, output the value of count.",
        "D": "Start a counter at 1. Call getChildTags(). If it returns null, output the value of the counter. Otherwise, increment counter and continue from where getChildTags() is called. Skip processing of the body.",
        "E": "If the tag has a body, invoke the fragment for that body.Otherwise, start a counter at 1. Call getParent(). If it returns null, output the value of the counter Otherwise, increment the counter and continue from where getParent() is called."
    },
    "answer": "D",
    "multi": false
}