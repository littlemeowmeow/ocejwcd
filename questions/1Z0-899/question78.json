{
  "answer": "AD",
  "explanation": "Because the Servlet init() method is invoked when the servlet instance is loaded, it is the perfect location to carry out expensive operations that need only be performed during initialization. By definition, the init() method is thread-safe. The results of operations in the HttpServlet.init() method can be cached safely in servlet instance variables, which become read-only in the servlet service method.\n\nExample:\n@PostConstruct\nprivate void init() {\ncached = (Cached) ctx.lookup(EJB_PATH + Cached.class.getSimpleName());",
  "question": "A servlet class is injected with a JDBC data source. After injection has occurred, the servlet needs to create a cache out of some of the data in the database, so as to improve responsiveness.\nWhich two methods can host the cache creation code? (Choose two)",
  "options": {
    "A": "Servlet.init()",
    "C": "A method annotated with @Init",
    "B": "Servlet.destroy()",
    "E": "A method annotated with @PreDestroy",
    "D": "A method annotated with @PostConstruct",
    "F": "A method annotated with @Resource"
  },
  "multi": true
}